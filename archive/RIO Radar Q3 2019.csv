name,ring,quadrant,isNew,description
OpenAPI,adopt,tools,FALSE,"The <a href=""https://github.com/OAI/OpenAPI-Specification"">OpenAPI Specification</a> (formerly known as Swagger) is a community-driven open specification within the OpenAPI Initiative, a Linux Foundation Collaborative Project.

The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for REST APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service."
Zally,adopt,tools,FALSE,"<a href=""https://github.com/zalando/zally"">Zally</a> is a minimalistic (REST) API linter that in it's standard configuration lint againts the <a href=""http://zalando.github.io/restful-api-guidelines/"">Zalando's RESTful guidelines</a>. Zally's easy-to-use CLI uses the server in the background so that you can check your API on the spot. It also features an intuitive Web UI that shows implemented rules and lints external files and (with its online editor) API definitions."
Sentry,adopt,tools,FALSE,"<a href=""https://sentry.io/welcome/"">Sentry</a> is an error tracking solution, we use in our frontends."
Selenium,adopt,tools,FALSE,"<a href=""https://www.seleniumhq.org/"">Selenium</a> is a well supported standard for browser automation. Our cloud based browser test runner BrowserStack also relies on Selenium."
BrowserStack,adopt,tools,FALSE,"Browserstack has been introduced in 2017 to support IE browser tests and we only have one account right now, nobody feels responsible right now so this has been escalated to higher places to decide how to continue, which would include providing the teams with sufficient accounts to support their testing efforts."
OpsGenie,adopt,tools,FALSE,"<a href=""https://www.opsgenie.com/"">OpsGenie</a> is a modern incident management tool, that routes and consolidates alerts. On-call schedules, escalation strategies and means to alert can be defined."
Gradle,adopt,tools,FALSE,"<i><a href=""https://gradle.org/"">Gradle</a></i> is a build-management and automation tool it can be used to build and deploy application code as well as infrastructure. Gradle supports build scripts  written in Groovy or Kotlin, which makes them very powerful and flexible."
ArchUnit,adopt,tools,FALSE,"<a href=""https://www.archunit.org/"">ArchUnit</a> is test framework for Java (and Kotlin) applications that allows to test the architecture of an application. It is well suited to check that the application follows a certain structure, e.g. hexagonal or layered architecutre, or whether classes/packages access other classes/packages. Since the tests are common JUnit tests and since they run fast, ArchUnit gives immediate feedback about your architecture during development and avoids regression errors in CI/CD runs."
Jib,adopt,tools,FALSE,"<a href=""https://github.com/GoogleContainerTools/jib"">Jib</a> is able to build Docker Images for Java applications. Jib is daemonless and it separates your application into several image layers. That makes incremental builds possible. With proper caching in place, you are able to reduce your build time and to simplify your CI-system significantly. It is available as Maven and Gradle plugin."
Corretto,adopt,tools,TRUE,Amazon Corretto is our favorite OpenJDK solution since we get a no-cost long-term supported distribute that receives security as well as performance enhancements. We discourage the usage of OracleJDK.
AWS Config,adopt,tools,TRUE,AWS Config continuously monitor configuration changes of AWS resources and check them against compliance rules we define. It allows viewing organization-wide compliance reports and identifying non-compliant accounts and resources. We decided to use AWS managed solution instead of OSS solutions like CloudCustodian to avoid additional hosting and maintaining efforts.
PhraseApp,adopt,tools,TRUE,"<a href=""https://phraseapp.com/"">PhraseApp</a> is a global translation tool with the following functionalities:<ul><li>Central source where all translations are stored.</li><li>Translation Memory across all Teams/Projects.</li><li>Glossaries for stuff like error messages and definitions.</li><li>In-Context Machine translations for minor translation jobs.</li><li>Command Line Tool and more like 40 file formats.</li><li>Powerful API to fulfill developer needs.</li><li>The power of special PhraseApp tools like Autopilot and Smart Suggest.</li></ul>"
MockK,trial,tools,TRUE,"<a href=""https://mockk.io/"">MockK</a> is becoming the de-facto standard library for testing in Kotlin. It uses Kotlin native features to provide a nice DSL for, for example, stubbing and mocking, supports coroutines, and integrates well into Spring."
Arrow,trial,tools,TRUE,"Arrow is a library for Typed Functional Programming in Kotlin. It includes very advanced concepts, but is also useful for everyone since it provides the most popular data types, type classes and abstractions such as Option, Try, Either, IO, Functor, Applicative and Monad."
cfn-lint,trial,tools,TRUE,"<a href=""https://github.com/aws-cloudformation/cfn-python-lint"">cfn-lint</a> is a JSON and YAML CloudFormation Validator checking against the CloudFormation spec and additional checks, including values for resource properties and best practices.<br>It can be used as a command line validator or added as a git pre-push hook to enforce validation."
CDK,assess,tools,TRUE,"The <a href=""https://docs.aws.amazon.com/cdk/index.html"">AWS Cloud Development Kit (CDK)</a> is a software development framework for defining infrastructure as code imperatively in multiple languages. It uses CloudFormation to provision the infrastructure.

Compared to the declarative approach, CDK has a bit more complex setup, but offers many high level Constructs which abstracts away lot of details which leads to less lines of code. In addition, teams can build and share their own Constructs and benefit from others learnings."
Detekt,assess,tools,TRUE,"<a href=""https://arturbosch.github.io/detekt/"">detekt</a> is a lightweight static code analyzer for Kotlin that helps to find code smells and track code complexity. It checks for Kotlin native language features, integrates well into CI/CD pipelines, there is an IntelliJ plugin for it, and can be used with Sonar."
AWS DocumentDB,assess,tools,TRUE,"<a href=""https://aws.amazon.com/de/documentdb/"">DocumentDB</a> is a managed database from AWS, providing a MongoDB 3.6 compatible API. It has been announced early 2019. Compared to e.g. Mongo Altas is lives within your VPC which causes loer latencies. In addition AWS resource policies as well as IAM policies could be used for permission management. As with all young AWS products one could face come bugs or <a href=""https://www.mongodb.com/atlas-vs-amazon-documentdb"">missing features compared to MongoDB</a> such as geospatial indexes and some more."
Resilience4J,assess,tools,TRUE,"<a href=""https://github.com/resilience4j/resilience4j/"">Resilience4j</a>  Resilience4j is a lightweight fault tolerance library inspired by Netflix Hystrix, but designed for Java 8 and functional programming."
CypressIO,assess,tools,TRUE,"<a href=""https://www.cypress.io"">Cypress</a> is a frontend end-to-end testing tool that provides an alternative for Selenium. It claims to make setting up, writing and debugging tests easier, faster and more reliable than Selenium based tools."
Snyk.io,assess,tools,TRUE,"<a href=""https://snyk.io/"">Snyk</a> is managed service to find and fix vulnerabilities in open source dependencies. We want to roll out an existing solution, rather than invest our engineering time. A central solution enables better reports and governance."
Laconia,assess,tools,TRUE,"<a href=""https://laconiajs.io/"">Laconia</a>  Laconia is a microframework for building Node.js serverless function based applications."
Ranorex,hold,tools,FALSE,"<a href=""https://www.ranorex.com/"">Ranorex</a> is an UI test automation tool that is used by some teams. As its propriarity tool and the automation is done using .NET there is less of an ecosystem around it. In comparison the <a href=""https://www.seleniumhq.org/ecosystem/"">selenium ecosystem</a> lists alone 5 cloud based test runners. Teams should strongly consider Selenium based test automation, but there is currently no need to migrate existing tests away from Ranorex."
A single CI instance for all teams,hold,tools,FALSE,"A single CI instance and its configuration becomes a bottleneck and couples teams to a shared service. We want to rather support teams to own their CI. See also the <a href=""https://www.thoughtworks.com/radar/techniques/a-single-ci-instance-for-all-teams"">blip from TW</a>"
Sonar theater,hold,tools,FALSE,"Measuring software internal quality is still a mystery, even though many source code metrics have been around for years. The problem with those metrics is they usually only capture one aspect of quality. We must consult many metrics to come to a conclusion about the overall quality of our code. Sonar is an integrated tool for checking, tracking and visualizing those metrics. It not only combines metrics together, but also mixes them with historical measures, giving us a better insight into the internal quality of the codebase. We, however, have seen mostly isses found and coverd which are not very important and code quality does not increase when code is written to just ""make sonar happy"". As a result we see unit tests for gettes/setters and similar methods for Java. It is significantly better to use a programming language which supports default implementations (e.g Kotlin or C#)."
Oracle JDK,hold,tools,TRUE,Oracle has stopped to freely distribute the Oracle JDK for production usage from January 2018. OpenJDK has become the industry favorite. Since we are deploying our Java Docker containers to ECS we favor the Amazon Corretto distribution as our OpenJDK base image.
Python 3,adopt,languages & frameworks,FALSE,Simpler tasks for the command line as well as small Lambdas on AWS should when using Python use it in version 3 instead of 2.7. Do not use Python for services.
Spring Boot 2,adopt,languages & frameworks,FALSE,"<a href=""https://spring.io/blog/2018/03/01/spring-boot-2-0-goes-ga"">Spring Boot</a> has been the main framework used for the microservices we have seen and thus upgrade to the new major version 2 seems to be the obvious choice. There are some significant changes which are targeted to support several state of the art concepts (Reactive programming, Kotlin support, Application metrics) in current development setups."
Typescript,adopt,languages & frameworks,FALSE,"<a href=""https://www.typescriptlang.org/"">Typescript</a> is a typed superset of JavaScript that compiles to plain JavaScript. We believe that the types (and the correspoding IDE support like autocompletion) helps us developers improving the code quality. Thus, Typescript is the recommended language when setting up a new frontend project."
Kotlin for backend,adopt,languages & frameworks,FALSE,"<a href=""http://kotlinlang.org/"">Kotlin</a> has experienced an accelerated rate of adoption and rapid growth of tooling support. Some of the reasons behind its popularity are its concise syntax, null safety, ease of transition from Java and interoperability with other JVM-based languages in general, and that it doubles as a great introductory language to functional programming. With JetBrains adding the ability to compile Kotlin to native binarieson multiple platforms, as well as transpile to JavaScript, we believe it has the potential of much wider use by the larger community of mobile and native application developers. Although at the time of writing, some of the tooling such as static and coverage code analysis have yet to mature, given our experience of using Kotlin in many production applications, we believe Kotlin is ready for general adoption."
AxonIQ,assess,languages & frameworks,TRUE,"<a href=""https://axoniq.io/"">AxonIQ</a> is a framework that helps to build Event Sourcing applications using CQRS architecture pattern. It integrates well with Spring, supports relational databases or MongoDB as event store and has integration for Kafka. It helps to start solving problems with Event Sourcing instead of solving Event Sourcing problems providing solution to read model reacreation, different event handling strategies within or out of the transactional boundaries of the aggregate and much more. "
Mithril,assess,languages & frameworks,TRUE,"<a href=""https://mithril.js.org"">Mithril</a>is a modern client-side JavaScript framework for building Single Page Applications. It is like a lightweight react that is fully developed without these big movements in code like react 15 to 16. In many cases it is much faster and easier to handle as react. It works with nearly every tool that can be used with react but you don´t have to use specific frameworks / tools. For example the redux state can fully be used and the react components can be included in an own space."
Spring Boot 1,hold,languages & frameworks,FALSE,"<a href=""https://spring.io/blog/2018/03/01/spring-boot-2-0-goes-ga"">Spring Boot</a> has been the main framework used for the microservices we have seen and thus upgrade to the new major version 2 seems to be the obvious choice. There are some significant changes which are targeted to support several state of the art concepts (Reactive programming, Kotlin support, Application metrics) in current development setups."
Node.js for services,hold,languages & frameworks,FALSE,"<a href=""https://nodejs.org/en/about/"">Node</a> is an asynchronous event driven JavaScript runtime designed to build scalable network applications. There are a ton of libraries and frameworks available to use with node through npm and, usually, the community support is top notch. Currently node is used in multiple projects within RIO and especially within the marketplace.
We discourage starting new services with Node.js ,as we do not want to support and maintain a tech stack in addition to our JVM based one."
Amazon Dynamo DB,adopt,platforms,FALSE,"For all services where the capabilities of DynamoDB are sufficient, we recommend to use it. It is a fully managed, highly scalable, low latency NoSQL database."
AWS Lambda,adopt,platforms,FALSE,"AWS Lambda is mostly used for infrastructure, delivery and governance use cases. Our decision to use Kafka instead of Kinesis is pushing us more towards Kafka Stream applications in Fargate than into Lambda based stream processing. Lambdas behind API Gateways are a viable option."
Kafka Streams,adopt,platforms,FALSE,"Kafka Streams is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It combines the simplicity of writing and deploying standard Java and Scala applications on the client side with the benefits of Kafka's server-side cluster technology."
Amazon API Gateway,adopt,platforms,FALSE,"<i><a href=""https://aws.amazon.com/api-gateway/"">Amazon API Gateway</a></i> provides a fully-managed public endpoint for all our APIs. It offers monitoring, authorization and traffic management features like rate limiting and canary deployments. Each service should have its own Amazon API Gateway."
Amazon RDS Aurora,adopt,platforms,FALSE,Amazon RDS Aurora is our prefered option for relational databases. Aurora offers MySQL and PostgreSQL compatible databases with a new architecture optimized for distributed cloud environment.
AWS Fargate,adopt,platforms,FALSE,"AWS Fargate is a recent entry into the docker-as-a-service space, currently limited to the US-East-1 region. For teams using AWS Elastic Container Service (ECS), AWS Fargate is a good alternative without having to manage, provision and configure any underlying EC2 instances or clusters. Fargate allows defining (ECS or EKS – ECS for Kubernetes) tasks as a Fargate type, and they will run on the AWS Fargate infrastructure. If you like the focus on business functionality that AWS Lambda gives you, Fargate is the closest you can get when applications can't be deployed as single functions."
AWS Code Tools,adopt,platforms,FALSE,"New deployments started to use AWS CodeBuild, CodePipeline and CodeDeploy as CI/CD tool chain. This allows, that the pipelines are created via code, that is part of the service repsository."
AWS Glue ETL,adopt,platforms,FALSE,"<i><a href=""https://aws.amazon.com/de/glue/"">AWS Glue</a></i> is a managed ETL service. It can be used to batch process data in reoccurring jobs. Under the hood Glue runs your code in Apache Spark."
Amazon Athena,adopt,platforms,FALSE,"<i><a href=""https://aws.amazon.com/de/athena/"">AWS Athena</a></i> is a managed Presto service. In combination with the AWS Glue Data Catalog it enables you to query S3 data with SQL. It supports CSV, JSON, ORC, Avro and Parquet. It is especially useful to do first data explorations."
Amazon Quicksight,adopt,platforms,FALSE,"<i><a href=""https://aws.amazon.com/de/quicksight/"">AWS Quicksight</a></i> is a cloud based BI service. In an AWS environment it is lightweight and it is able to connect to S3, S3 via Athena, Redshift and many other data sources. Quicksight enables users to query data either with SQL or with a graphical tool. Results can be visualized on Dashboards."
AWS Glue Data Catalog,trial,platforms,FALSE,"<i><a href=""https://aws.amazon.com/de/glue/"">AWS Glue</a></i> provides besides a managed ETL service also a Data Catalog. It is able to infer schemata from S3 buckets with so called crawlers. It also supports multiple versions of a schema."
Amazon RDS,hold,platforms,FALSE,"Amazon RDS offers managed relational databases, where most operational tasks are taking care of. When your workload fits a relational database, please strongly recommend the more advanced Aurora offerings."
.NET Core,hold,platforms,FALSE,We have far more experiences running JVM based workloads and we do not see any relevant advantage of the .NET ecosystem for us.
Adobe Experience Manager,hold,platforms,FALSE,"We use AEM as content management tool for the more static parts of our web presence. Content as part of our own applications are static resources in the respective repositories.
We are currently investigating more lightweight alternatives, that are closer to existing web development skills."
ECS on EC2,hold,platforms,TRUE,"You should run your ECS cluster with your own EC2 instances only when you need features that aren't supported by Fargate. And even in that case think about it. If you run your own EC2 instances, it's your responsibility to care about regular updates of the AMI and additional installed tools. It's also not trivial to scale the cluster automatically to run with as least resources as possible. And from a pure compute costs perspective, it's very hard to beat the latest price reduction of Fargate (<a href=""https://www.trek10.com/blog/fargate-pricing-vs-ec2/"">More details</a> ). "
Continuous Delivery,adopt,techniques,FALSE,"If you are wondering “What comes after agile?,” you should look towards continuous delivery. While your development processes may be fully optimized, it still might take your organization weeks or months to get a single change into production. Continuous delivery focuses on maximizing automation including infrastructure as code, environment management and deployment automation to ensure your system is always ready for production. It is about tightening your feedback loops and not putting off anything until the end. Continuous delivery is not the same as continuous deployment, which means deploying every change to production. Continuous delivery is not a cowboy show. It puts you in charge of your production environment. The business can pick and choose what and when to deploy. If you think you’ve nailed agile development, but aren’t considering how to achieve continuous delivery, you really haven’t even started."
Feature toggles,adopt,techniques,FALSE,"<a href=""https://martinfowler.com/articles/feature-toggles.html"">Feature toggles</a> are an import concept in continuous delivery. Release toggles decouple features releases from code deployments and enable trunk based development."
Trunk-based development,adopt,techniques,FALSE,"From <a href=""https://trunkbaseddevelopment.com/"">trunkbaseddevelopment.com</a>:</br>
<i>A source-control branching model, where developers collaborate on code in a single branch called ‘trunk’ or master, resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.</i>
</br>
Short-lived branches, that are merged within the day are allowed."
Pairing/ code reviews,adopt,techniques,FALSE,"In order to further adopt XP practices, improve code quality and foster knowledge transfer within the team, we want to strengthen the introduction of pair programming and code reviews. Both options are viable, with pair programming beeing the preferred option."
Multi AWS accounts,adopt,techniques,FALSE,"To decouple our bounded contexts and to limit the blast radius, we are moving from a single production account to multiple accounts.  One AWS account per bounded context."
SSO federated to AD,adopt,techniques,FALSE,We want to avoid the work and securty risk of manual user management in services used by employees and instead federate all logins to our AD. 
"You build it, you run it - light",adopt,techniques,FALSE,"YBIYRI is the true meaning of DevOps. The team not only writes the software, but owns the whole product lifecycle. Including the responsibility to deploy and operate the service. If a service owned by a team is hard to operate and create many alerts, it cannot offload that pain to somebody else. They are in charge and the typical reaction is to make the service more resilient, reduce the number of alerts and make them more actionable.</br></br>
As we currently cannot have on-call duties during non-office hours, we still want to close the feedback loop from production as much as possible. This is why we start with YBIYRI light, where the team takes on this responsibilities at least during office hours."
Domain-Driven Design,adopt,techniques,FALSE,"<a href=""http://dddcommunity.org/"">Domain-Driven-Design</a> was first described by Eric Evans in 2004. It is an approach to software development for complex needs by connecting the implementation to an evolving model of the core buiseness concepts. The cpmplexity of the domain is supposed to be the most significant in most projects. Hence, the focus during the design process should be placed on the core domain and the domain logic. Additionally, DDD should initiate a creative and iterative collaboration between technical and domain experts to be able to understand the conceptual heart of complex problems."
Hexagonal architecture,adopt,techniques,FALSE,"Hexagonal Architecture is a software design pattern, which fits well into Domain-Driven-Design approaches. It is also known as onion architecture, clean architecture or ports and adapters. The pattern describes a 2-dimensional layered architecture with the domain in its core, surrounded by application and framework layers. Objects (adapters) from outer layers can implement interfaces (ports) of inner layers but are not used directly. This architecture pattern helps separating the concerns of your application and focussing on the core domain for better maintainability and less technical debt."
Proper bounded contexts,adopt,techniques,FALSE,"The bounded context is a core concept of Domain-Driven Design. It delimits the applicability of a particular model so that team members have a clear and shared understanding of what has to be consistent and how it relates to other contexts.</br></br>
It is important to get the boundaries right and very helpful to enforce them in the architecture. We map the bounded contexts to AWS accounts, APIs and other conventions."
Architecture decision records,adopt,techniques,FALSE,"Important design and architecture decisions should be documented. This helps our future self to understand why and in what context those decisions where made and what where the consequences.</br></br>Those lightweight architecture decision records should be kept in the same repository as the service affected by the decision. If the decision is on a bounded context level, it should be kept in a separate repository within the project of the context. Macro architecture decisions are kept in Confluence."
Serverless,adopt,techniques,FALSE,"We want to avoid operating infrastructure ourself as much as possible, because we want to focus on writing code relevant for our business. Servless services from AWS are other service providers help with that.</br></br>
Our decision to use Kafka instead of Kinesis is limiting are capability to embrace some serverless use cases."
API first,adopt,techniques,FALSE,"The idea of <a href=""https://www.programmableweb.com/api-university/understanding-api-first-design"">API first</a> is to develop the API together with the stakeholders before starting with the implementation. The benefit is to get feedback early and think more about the requirements for the API instead of the implementation details. For us the service interface includes published events which should go through the same design process."
Immutable data structures,adopt,techniques,FALSE,"A immutable data structure that always preserves the previous version of itself when it is modified, e.g. a list that cannot be changed. Instead of updating the list in-place, a new list is created. Immutability is an important building block in functional programming, but the idea is useful in all programming styles. Immutable objects are always thread-safe, their usage is side-effect free, they help avoiding temporal coupling and testing is ofter easier."
Sidecar pattern,adopt,techniques,FALSE,"The <a href=""https://medium.com/netflix-techblog/prana-a-sidecar-for-your-netflix-paas-based-applications-and-services-258a5790a015"">sidecar pattern</a> was introduced by Netflix to push platform capabilities from shared libraries back into the infrastructure.
We are for example trying the DataDog agent as sidecar in Fargate."
Threat Modeling,trial,techniques,FALSE,"From <a href=""https://www.thoughtworks.com/de/radar/techniques/threat-modeling"">TW Radar</a>:</br>
<i>Threat Modeling provides a set of techniques that help you identify and classify potential threats early in the development process. It is important to understand that it is only part of a strategy to stay ahead of threats. When used in conjunction with techniques such as establishing cross-functional security requirements to address common risks in the technologies a project uses and using automated security scanners, threat modeling can be a powerful asset.</i>"
Chaos engineering,trial,techniques,FALSE,"<a href=""https://principlesofchaos.org/"">Principles of Chaos Engineering</a></br>
<i>Chaos Engineering is the discipline of experimenting on a distributed system
in order to build confidence in the system’s capability
to withstand turbulent conditions in production.</i>
</br></br>
Our microservices architecture is inevitable a distributed system and controlled failure injection is a way that leads to building more resilient services. "
Resilience patterns,trial,techniques,FALSE,"We are building a distributed system, that introduces new failure modes. We need to adopt <a href=""https://www.slideshare.net/ufried/resilience-reloaded-more-resilience-patterns"">Resilience patterns</a> to enable highly availability by reducing MTTR (mean time to recovery). "
Mobile first,trial,techniques,TRUE,"“Mobile first”, as the name suggests, means that you start the product design from the mobile end which has more restrictions. For example, the hover effect which is only supported by a cursor mouse or HD images & complex charts which only can be displayed when there is a recent bandwidth or screen resolution."
Multi-tenancy,trial,techniques,FALSE,"When testing in production, production data needs to be segregated from test data. This includes data generated by the tests. Also the data lake and tools like Google Analytics should not be affected. One option is, that all services follow the concept of a data sandbox, which is just a form of multi-tenancy. One tenant is production and additional tenants can be created for testing. This would also help with APIs for partners, which typically also require a tenant for testing."
Event Sourcing,trial,techniques,FALSE,"<a href=""https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing"">Event Sourcing</a> is a pattern that stores a record of events as source of truth. It is a complex pattern, that is helpful in complex domains. At is often used in conjunction with CQRS and matches an event-driven architecture."
CQRS,trial,techniques,FALSE,"<a href=""https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs"">CQRS - Command Query Responsibility Segregation</a> is a pattern that treats updating and reading operations differently. This in contrast to CRUD applications, where all operations are applied to the same entity. CQRS in conjunction with Event Sourcing is a very powerful, but complex pattern."
Reactive programming/ ReactiveX in the backend,trial,techniques,FALSE,"<a href=""https://en.wikipedia.org/wiki/Reactive_programming"">Reactive programming</a> and more specifically <a href=""http://reactivex.io/"">ReactiveX</a> is a programming paradigm and powerful abstraction for many problems. It is declarative and available for all major languages."
Feature toggle service,trial,techniques,FALSE,"At some point in the mature of implementing feature toggles a feature toggle service is required. It enable toggles across deployable units and allows for more sophisticated use cases like A/B testing and canary releases. As we are still early in the adoption of feature toggles introducing the added value of a feature toggle service will also help with adoption. There are OSS and managed feature toggle services available. For example:
</br>
<a href=""https://github.com/Unleash/unleash"">Unleash (OSS)</a></br>
<a href=""https://launchdarkly.com/"">Launch Darkly (managed)</a></br>
<a href=""https://rollout.io/"">Rollout (managed)</a>"
GraphQL,assess,techniques,FALSE,"We do not intend to replace REST APIs with GraphQL, but it might be an option for aggregating existing APIs. For example as backend for frontends (BFF)."
Event Sourcing with DDB and Lambdas,assess,techniques,TRUE,"Using DynamoDB as event store and read models generated by Dynamo Stream Handlers (Lambdas) provide a lightweight, scalable & frameworkless way to implement event sourcing that is easy to understand and debug. This comes at a cost - you need to write more boilerplate / implement more things yourself than when using a framework."
Microfrontends,assess,techniques,TRUE,"We evaluate a couple of different approaches for implementing micro frontends. Our goal is to enable teams to independendly deploy and maintain their frontends and be fully responsible for them (similar to what we do on the backend side with microservices). Currently we evaluate using single page apps per team with some commonly shared components, iframes and web components. Each of those approaches has it's own use case and makes sense in a certain setting. So far we tend to prefer a single page app per context and if we need to integrate context specific frontend parts in another context's frontend, we aim for cross-origin iframes, because they provide a clear separation of frontend clients on the authentication side."
API validation,assess,techniques,TRUE,"For API Validation, REST request and response or Kafka events, there are some automated solutions to enable validation during runtime or testing against an Open API spec.<br>For node it is possible to use <a href=""https://www.npmjs.com/package/express-openapi-validate"">express-openapi-validate</a>.<br>For Java/Kotlin it is possible to use <a href=""https://bitbucket.org/atlassian/swagger-request-validator/src/master/"">swagger-request-validator</a> that supports Swagger v2 and OpenAPI v3 specifications or <a href=""https://github.com/cdimascio/openapi-spring-webflux-validator"">openapi-spring-webflux-validator</a>.<br>It is also possible to automatically test our APIs by using <a href=""https://www.getpostman.com/collection"">Postman Collections</a> and it's command line test runner <a href=""https://learning.getpostman.com/docs/postman/collection_runs/command_line_integration_with_newman"">Newman</a>. For us it provides the advantage that we can easily import our OpenAPI files to Postman and easily put together all relevant use cases of our api while beeing able to add <a href=""https://learning.getpostman.com/docs/postman/scripts/pre_request_scripts"">pre-request logic</a> and <a href=""https://learning.getpostman.com/docs/postman/scripts/test_scripts""test scripts</a>. This also provides a nice way to document our api for users."
Shared libraries,hold,techniques,FALSE,"""Common"", ""General"" or similar sounding libraries should be avoided if they could not be opensourced since upgrading an (internal) common library is poarticularly complex to almost impossible."
Layered architecture,hold,techniques,FALSE,Layered architecture is a good pattern for structuring larger services. We feel that a microservice should be small enough to not require that much internal structure. The friction introduced by internally layering a microservice should be avoided. Hexagonal architecture is a preferred internal architecture for microservices.
Scrum theater,hold,techniques,FALSE,"Scrum alone is not sufficient to become agile. All the ceremony does not help, when for example XP practices are left out. Scrum is deliberatly non descriptive with that regard, but it also should not be forgotten."
Entity service,hold,techniques,FALSE,"Entity services are the attempt of decomposing a system into microservices following the nouns hence entities. At first glance they have all properties of proper microservices, but are completely missing the behavior part. You might end up with a service that supports CRUD via REST and all the behavior is pushed to the clients of the service. Use event storming and reason about event based data flow to define your microservices."