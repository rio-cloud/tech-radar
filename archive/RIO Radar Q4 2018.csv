name,ring,quadrant,isNew,description
OpenAPI,adopt,tools,FALSE,"The <a href=""https://github.com/OAI/OpenAPI-Specification"">OpenAPI Specification</a> (formerly known as Swagger) is a community-driven open specification within the OpenAPI Initiative, a Linux Foundation Collaborative Project.

The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for REST APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service."
Zally,adopt,tools,FALSE,"<a href=""https://github.com/zalando/zally"">Zally</a> is a minimalistic (REST) API linter that in it's standard configuration lint againts the <a href=""http://zalando.github.io/restful-api-guidelines/"">Zalando's RESTful guidelines</a>. Zally's easy-to-use CLI uses the server in the background so that you can check your API on the spot. It also features an intuitive Web UI that shows implemented rules and lints external files and (with its online editor) API definitions."
Sentry,adopt,tools,FALSE,"<a href=""https://sentry.io/welcome/"">Sentry</a> is an error tracking solution, we use in our frontends."
Selenium,adopt,tools,FALSE,"<a href=""https://www.seleniumhq.org/"">Selenium</a> is a well supported standard for browser automation. Our cloud based browser test runner BrowserStack also relies on Selenium."
BrowserStack,adopt,tools,FALSE,"Browserstack has been introduced in 2017 to support IE browser tests and we only have one account right now, nobody feels responsible right now so this has been escalated to higher places to decide how to continue, which would include providing the teams with sufficient accounts to support their testing efforts."
DataDog,adopt,tools,FALSE,"<a href=""https://www.datadoghq.com"">Datadog</a> is a managed monitoring solution, that can increase our observability capabilities with little engineering effort on our side. Tools like DataDog give the operational insight required for teams being able to run their own services. Our initial trial was successful without much hassle and teams liked the ease of use."
OpsGenie,adopt,tools,FALSE,"<a href=""https://www.opsgenie.com/"">OpsGenie</a> is a modern incident management tool, that routes and consolidates alerts. On-call schedules, escalation strategies and means to alert can be defined."
Gradle,adopt,tools,TRUE,"<i><a href=""https://gradle.org/"">Gradle</a></i> is a build-management and automation tool it can be used to build and deploy application code as well as infrastructure. Gradle supports build scripts  written in Groovy or Kotlin, which makes them very powerful and flexible."
ApiCenter,trial,tools,TRUE,"<i><a href=""https://github.com/TNG/ApiCenter"">ApiCenter</a></i> is an API registry for OpenAPI specifications written and opensourced by TNG Technology. It is intended to have a centralized place to search and browse available APIs."
ArchUnit,trial,tools,TRUE,"<a href=""https://www.archunit.org/"">ArchUnit</a> is test framework for Java (and Kotlin) applications that allows to test the architecture of an application. It is well suited to check that the application follows a certain structure, e.g. hexagonal or layered architecutre, or whether classes/packages access other classes/packages. Since the tests are common JUnit tests and since they run fast, ArchUnit gives immediate feedback about your architecture during development and avoids regression errors in CI/CD runs."
Kong API Gateway,assess,tools,TRUE,"A popular, widely adopted API Gateway build on top of NGINX. It's blazingly fast and has a huge feature set. However it also required a PostgreSQL or Cassandra database and seems to be too complicated for us. More information on the <a href=""https://konghq.com/"">Kong website</a> or <a href=""https://www.youtube.com/watch?v=OUUiS28hZuw"">introduction video</a>"
pivio.io,assess,tools,FALSE,"<i><a href=""https://pivio.io"">pivio.io</a> is description in your source code with all the metadata of your service describing itself. This can be as simple as the name, owner and vcs information as well as useful information about runtime environment, used licenses and service dependencies.
Pivio is a service registry for humans.</i>
We have postponed our assessment, until we have a proper API registry. Some needs for a human service registry are also fullfiled by an API registry."
Jib,assess,tools,TRUE,"<a href=""https://github.com/GoogleContainerTools/jib"">Jib</a> is able to build Docker Images for Java applications. Jib is daemonless and it separates your application into several image layers. That makes incremental builds possible. With proper caching in place, you are able to reduce your build time and to simplify your CI-system significantly. It is available as Maven and Gradle plugin."
Cloud Conformity,assess,tools,TRUE,"<a href=""https://www.cloudconformity.com/"">Cloud Conformity</a> is a managed continuous assurance tool for AWS accounts. It could be an alternative to AWS Config rules, because AWS Config and Config rules can become quite expensive. There are managed rules and open source collections of custom rules, but it is still some effort."
Cloud Custodian,assess,tools,TRUE,"<a href=""https://github.com/capitalone/cloud-custodian"">Cloud Custodian</a> is an OSS cloud governance tool that has an active community. It could be an alternative to AWS Config rules, because AWS Config and Config rules can become quite expensive."
Ranorex,hold,tools,FALSE,"<a href=""https://www.ranorex.com/"">Ranorex</a> is an UI test automation tool that is used by some teams. As its propriarity tool and the automation is done using .NET there is less of an ecosystem around it. In comparison the <a href=""https://www.seleniumhq.org/ecosystem/"">selenium ecosystem</a> lists alone 5 cloud based test runners. Teams should strongly consider Selenium based test automation, but there is currently no need to migrate existing tests away from Ranorex."
A single CI instance for all teams,hold,tools,FALSE,"A single CI instance and its configuration becomes a bottleneck and couples teams to a shared service. We want to rather support teams to own their CI. See also the <a href=""https://www.thoughtworks.com/radar/techniques/a-single-ci-instance-for-all-teams"">blip from TW</a>"
Self-hosted ELK,hold,tools,FALSE,We want to avoid the undifferentiated heavy lifting of operating our own logging and monitoring infrastructure and rather aim for a managed solution like DataDog.
Sonar theater,hold,tools,FALSE,"Measuring software internal quality is still a mystery, even though many source code metrics have been around for years. The problem with those metrics is they usually only capture one aspect of quality. We must consult many metrics to come to a conclusion about the overall quality of our code. Sonar is an integrated tool for checking, tracking and visualizing those metrics. It not only combines metrics together, but also mixes them with historical measures, giving us a better insight into the internal quality of the codebase. We, however, have seen mostly isses found and coverd which are not very important and code quality does not increase when code is written to just ""make sonar happy"". As a result we see unit tests for gettes/setters and similar methods for Java. It is significantly better to use a programming language which supports default implementations (e.g Kotlin or C#)."
Node.js,adopt,languages & frameworks,FALSE,"<a href=""https://nodejs.org/en/about/"">Node</a> is an asynchronous event driven JavaScript runtime designed to build scalable network applications. There are a ton of libraries and frameworks available to use with node through npm and, usually, the community support is top notch. Currently node is used in multiple projects within RIO and especially within the marketplace. When comparing with java/spring, the development speed and lightweightedness is appreciated by the developer.

Change possible, dedicated discussion required."
Python 3,adopt,languages & frameworks,FALSE,Simpler tasks for the command line as well as small Lambdas on AWS should when using Python use it in version 3 instead of 2.7.
Spring Boot 2,adopt,languages & frameworks,FALSE,"<a href=""https://spring.io/blog/2018/03/01/spring-boot-2-0-goes-ga"">Spring Boot</a> has been the main framework used for the microservices we have seen and thus upgrade to the new major version 2 seems to be the obvious choice. There are some significant changes which are targeted to support several state of the art concepts (Reactive programming, Kotlin support, Application metrics) in current development setups."
Typescript,trial,languages & frameworks,FALSE,"Change possible, dedicated discussion required."
Kotlin for backend,trial,languages & frameworks,FALSE,"<a href=""http://kotlinlang.org/"">Kotlin</a> has experienced an accelerated rate of adoption and rapid growth of tooling support. Some of the reasons behind its popularity are its concise syntax, null safety, ease of transition from Java and interoperability with other JVM-based languages in general, and that it doubles as a great introductory language to functional programming. With JetBrains adding the ability to compile Kotlin to native binarieson multiple platforms, as well as transpile to JavaScript, we believe it has the potential of much wider use by the larger community of mobile and native application developers. Although at the time of writing, some of the tooling such as static and coverage code analysis have yet to mature, given our experience of using Kotlin in many production applications, we believe Kotlin is ready for general adoption.

Change possible, dedicated discussion required."
Flow,assess,languages & frameworks,TRUE,"Flow is a static type checker for your JavaScript code. Flow checks your code for errors through static type annotations. Because Flow understands JavaScript so well, it doesn’t need many of these types. You should only ever have to do a minimal amount of work to describe your code to Flow and it will infer the rest. A lot of the time, Flow can understand your code without any types at all. That's why it may be a good alternative those who want to use stytic type checking in JavaScript. It also may be a good alternative for TypeScript."
Golang for Lambda,assess,languages & frameworks,TRUE,"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. It is superior to JavaScript for Lambdas since it is typesafed and very fast."
Ktor,assess,languages & frameworks,TRUE,Ktor is a framework for building asynchronous servers and clients in connected systems using the powerful Kotlin programming language.
Spring Boot 1,hold,languages & frameworks,TRUE,"<a href=""https://spring.io/blog/2018/03/01/spring-boot-2-0-goes-ga"">Spring Boot</a> has been the main framework used for the microservices we have seen and thus upgrade to the new major version 2 seems to be the obvious choice. There are some significant changes which are targeted to support several state of the art concepts (Reactive programming, Kotlin support, Application metrics) in current development setups."
Avro,hold,languages & frameworks,FALSE,TODO: Write and accept ADR
Adobe Experience Manager,adopt,platforms,FALSE,We use AEM as content management tool for the more static parts of our web presence. Content as part of our own applications are static resources in the respective repositories.
Amazon Dynamo DB,adopt,platforms,FALSE,"For all services where the capabilities of DynamoDB are sufficient, we recommend to use it. It is a fully managed, highly scalable, low latency NoSQL database."
AWS Lambda,adopt,platforms,FALSE,"AWS Lambda is mostly used for infrastructure, delivery and governance use cases. Our decision to use Kafka instead of Kinesis is pushing us more towards Kafka Stream applications in Fargate than into Lambda based stream processing. Lambdas behind API Gateways are a viable option."
Kafka,adopt,platforms,FALSE,"Kafka is our central infrastructure, that powers our streaming, message bus, queueing and event sourcing needs. We decided for now against Kinesis and other use case specific services. Kafka should enable our event-driven architecture."
Kafka Streams,adopt,platforms,FALSE,"Kafka Streams is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It combines the simplicity of writing and deploying standard Java and Scala applications on the client side with the benefits of Kafka's server-side cluster technology."
Amazon API Gateway,adopt,platforms,FALSE,"<i><a href=""https://aws.amazon.com/api-gateway/"">Amazon API Gateway</a></i> provides a fully-managed public endpoint for all our APIs. It offers monitoring, authorization and traffic management features like rate limiting and canary deployments. Each service should have its own Amazon API Gateway."
Amazon RDS Aurora,adopt,platforms,FALSE,Amazon RDS Aurora is our prefered option for relational databases. Aurora offers MySQL and PostgreSQL compatible databases with a new architecture optimized for distributed cloud environment.
Amazon RDS,adopt,platforms,TRUE,"Amazon RDS offers managed relational databases, where most operational tasks are taking care of. When your workload fits a relational database, please consider the more advanced Aurora offering first."
Amazon Cognito,adopt,platforms,FALSE,"<i><a href=""https://aws.amazon.com/cognito/"">Amazon Cognito</a></i> is a managed identity provider that offers user sign-up and sign-in, multi-factor authentication, user federation with SAML and a lot more. We use it to save user credentials savely and integration with other identity providers (e.g. MAN service care)"
AWS Fargate,adopt,platforms,FALSE,"AWS Fargate is a recent entry into the docker-as-a-service space, currently limited to the US-East-1 region. For teams using AWS Elastic Container Service (ECS), AWS Fargate is a good alternative without having to manage, provision and configure any underlying EC2 instances or clusters. Fargate allows defining (ECS or EKS – ECS for Kubernetes) tasks as a Fargate type, and they will run on the AWS Fargate infrastructure. If you like the focus on business functionality that AWS Lambda gives you, Fargate is the closest you can get when applications can't be deployed as single functions."
AWS Code Tools,adopt,platforms,FALSE,"New deployments started to use AWS CodeBuild, CodePipeline and CodeDeploy as CI/CD tool chain. This allows, that the pipelines are created via code, that is part of the service repsository."
AWS Glue ETL,adopt,platforms,TRUE,"<i><a href=""https://aws.amazon.com/de/glue/"">AWS Glue</a></i> is a managed ETL service. It can be used to batch process data in reoccurring jobs. Under the hood Glue runs your code in Apache Spark."
Amazon Athena,adopt,platforms,TRUE,"<i><a href=""https://aws.amazon.com/de/athena/"">AWS Athena</a></i> is a managed Presto service. In combination with the AWS Glue Data Catalog it enables you to query S3 data with SQL. It supports CSV, JSON, ORC, Avro and Parquet. It is especially useful to do first data explorations."
AWS CloudFormation Custom Resources,adopt,platforms,TRUE,"<i><a href=""https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html"">CloudFormation Custom Resources</a></i> can be used to provide a uniform way of defining infrastructure resources which are not AWS native. You can write custom provisioning logic in templates that AWS CloudFormation runs anytime you create, update or delete stacks. CloudFormation can publish SNS notifications or invoke lambda functions directly upon state transitions."
Amazon Kinesis Data Streams,trial,platforms,FALSE,"Currently Kafka is used as our shared event bus, but for many use cases Kinesis is a viable alternative. It has less capabilities in comparison to Kafka, but is a fully managed service."
AWS Glue Data Catalog,assess,platforms,TRUE,"<i><a href=""https://aws.amazon.com/de/glue/"">AWS Glue</a></i> provides besides a managed ETL service also a Data Catalog. It is able to infer schemata from S3 buckets with so called crawlers. It also supports multiple versions of a schema."
Amazon Quicksight,assess,platforms,TRUE,"<i><a href=""https://aws.amazon.com/de/quicksight/"">AWS Quicksight</a></i> is a cloud based BI service. In an AWS environment it is lightweight and it is able to connect to S3, S3 via Athena, Redshift and many other data sources. Quicksight enables users to query data either with SQL or with a graphical tool. Results can be visualized on Dashboards."
Amazon Redshift,assess,platforms,TRUE,"<i><a href=""https://aws.amazon.com/de/redshift/"">AWS Redshift</a></i> is a data warehouse. Together with Redshift Spectrum it can smoothen the transition of data from a raw and hard to query format in the data-lake to a query optimized format in the data warehouse."
AWS AppSync,assess,platforms,TRUE,"AWS AppSync is a managed GraphQL service that can connect and resolve to resources like DynamoDB, Lambda and ElasticSearch. When we assess GraphQL, this should be the first option to look into."
WSO2,hold,platforms,FALSE,"WSO2 is our current Identity Provider, Authorization Service and API Gateway, but we never managed to get our setup stable and scalable. As we lost trust in the system, we will migrate away from it and implement upcoming features with Amazon Cognito, Amazon API Gateway and a self-written authorization service."
Salesforce as system of records,hold,platforms,FALSE,"Currently Salesforce is the system of records for account information, but the data is not properly synchronized with our platform. The platform should to be the system of record for account data that is required for behaviour in the platform. This would also be prequisite for our multi-tenancy strategy ."
Spark Streaming,hold,platforms,FALSE,All our Spark Streaming solutions have been successfully replaced by Kafka Streams. In case you have a batch processing use case for Spark it is suggested to use AWS Glue which provides a managed Spark.
.NET Core,hold,platforms,FALSE,We have far more experiences running JVM based workloads and we do not see any relevant advantage of the .NET ecosystem for us.
Continuous Delivery,adopt,techniques,FALSE,"If you are wondering “What comes after agile?,” you should look towards continuous delivery. While your development processes may be fully optimized, it still might take your organization weeks or months to get a single change into production. Continuous delivery focuses on maximizing automation including infrastructure as code, environment management and deployment automation to ensure your system is always ready for production. It is about tightening your feedback loops and not putting off anything until the end. Continuous delivery is not the same as continuous deployment, which means deploying every change to production. Continuous delivery is not a cowboy show. It puts you in charge of your production environment. The business can pick and choose what and when to deploy. If you think you’ve nailed agile development, but aren’t considering how to achieve continuous delivery, you really haven’t even started."
Feature toggles,adopt,techniques,TRUE,"<a href=""https://martinfowler.com/articles/feature-toggles.html"">Feature toggles</a> are an import concept in continuous delivery. Release toggles decouple features releases from code deployments and enable trunk based development."
Trunk-based development,adopt,techniques,FALSE,"From <a href=""https://trunkbaseddevelopment.com/"">trunkbaseddevelopment.com</a>:</br>
<i>A source-control branching model, where developers collaborate on code in a single branch called ‘trunk’ or master, resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.</i>
</br>
Short-lived branches, that are merged within the day are allowed."
Pairing/ code reviews,adopt,techniques,FALSE,"In order to further adopt XP practices, improve code quality and foster knowledge transfer within the team, we want to strengthen the introduction of pair programming and code reviews. Both options are viable, with pair programming beeing the preferred option."
TDD,adopt,techniques,FALSE,"Test-driven development is a test-first approach to software development, that helps driving a simple, testable design and allows to work with more confidence. This method requires some practice and is often disregarded because of perceived productivity loses. The experience is often, that in combination with other XP practices it allows to keep a sustainable pace."
BDD,adopt,techniques,FALSE,BDD is an opinionated flavor of TDD that focuses even more on use of language and relating tests back to acceptance criteria.
Multi AWS accounts,adopt,techniques,FALSE,"To decouple our bounded contexts and to limit the blast radius, we are moving from a single production account to multiple accounts.  One AWS account per bounded context."
SSO federated to AD,adopt,techniques,FALSE,We want to avoid the work and securty risk of manual user management in services used by employees and instead federate all logins to our AD. 
"You build it, you run it - light",adopt,techniques,FALSE,"YBIYRI is the true meaning of DevOps. The team not only writes the software, but owns the whole product lifecycle. Including the responsibility to deploy and operate the service. If a service owned by a team is hard to operate and create many alerts, it cannot offload that pain to somebody else. They are in charge and the typical reaction is to make the service more resilient, reduce the number of alerts and make them more actionable.</br></br>
As we currently cannot have on-call duties during non-office hours, we still want to close the feedback loop from production as much as possible. This is why we start with YBIYRI light, where the team takes on this responsibilities at least during office hours."
Domain-Driven Design,adopt,techniques,TRUE,"<a href=""http://dddcommunity.org/"">Domain-Driven-Design</a> was first described by Eric Evans in 2004. It is an approach to software development for complex needs by connecting the implementation to an evolving model of the core buiseness concepts. The cpmplexity of the domain is supposed to be the most significant in most projects. Hence, the focus during the design process should be placed on the core domain and the domain logic. Additionally, DDD should initiate a creative and iterative collaboration between technical and domain experts to be able to understand the conceptual heart of complex problems."
Hexagonal architecture,adopt,techniques,TRUE,"Hexagonal Architecture is a software design pattern, which fits well into Domain-Driven-Design approaches. It is also known as onion architecture, clean architecture or ports and adapters. The pattern describes a 2-dimensional layered architecture with the domain in its core, surrounded by application and framework layers. Objects (adapters) from outer layers can implement interfaces (ports) of inner layers but are not used directly. This architecture pattern helps separating the concerns of your application and focussing on the core domain for better maintainability and less technical debt."
Proper bounded contexts,adopt,techniques,TRUE,"The bounded context is a core concept of Domain-Driven Design. It delimits the applicability of a particular model so that team members have a clear and shared understanding of what has to be consistent and how it relates to other contexts.</br></br>
It is important to get the boundaries right and very helpful to enforce them in the architecture. We map the bounded contexts to AWS accounts, APIs and other conventions."
Architecture decision records,adopt,techniques,TRUE,"Important design and architecture decisions should be documented. This helps our future self to understand why and in what context those decisions where made and what where the consequences.</br></br>Those lightweight architecture decision records should be kept in the same repository as the service affected by the decision. If the decision is on a bounded context level, it should be kept in a separate repository within the project of the context. Macro architecture decisions are kept in Confluence."
Serverless,adopt,techniques,FALSE,"We want to avoid operating infrastructure ourself as much as possible, because we want to focus on writing code relevant for our business. Servless services from AWS are other service providers help with that.</br></br>
Our decision to use Kafka instead of Kinesis is limiting are capability to embrace some serverless use cases."
API first,adopt,techniques,FALSE,"The idea of <a href=""https://www.programmableweb.com/api-university/understanding-api-first-design"">API first</a> is to develop the API together with the stakeholders before starting with the implementation. The benefit is to get feedback early and think more about the requirements for the API instead of the implementation details. For us the service interface includes published events which should go through the same design process."
UX first,adopt,techniques,TRUE,"We follow the approach to prototype and design new services and features first before they are actually developed. We also use the mobile first approch and build all UI's with Bootstrap, RIO UIKIT components and additional atomic classes. Most used browsers are considered as well as different screen sizes. All UI concepts are also evaluated for feasibility and are adapted accordingly in case. The UIKIT is also constantly updated for new and missing components as well as styling changes. "
Immutable data structures,adopt,techniques,FALSE,"A immutable data structure that always preserves the previous version of itself when it is modified, e.g. a list that cannot be changed. Instead of updating the list in-place, a new list is created. Immutability is an important building block in functional programming, but the idea is useful in all programming styles. Immutable objects are always thread-safe, their usage is side-effect free, they help avoiding temporal coupling and testing is ofter easier."
Threat Modeling,trial,techniques,FALSE,"From <a href=""https://www.thoughtworks.com/de/radar/techniques/threat-modeling"">TW Radar</a>:</br>
<i>Threat Modeling provides a set of techniques that help you identify and classify potential threats early in the development process. It is important to understand that it is only part of a strategy to stay ahead of threats. When used in conjunction with techniques such as establishing cross-functional security requirements to address common risks in the technologies a project uses and using automated security scanners, threat modeling can be a powerful asset.</i>"
Chaos engineering,trial,techniques,FALSE,"<a href=""https://principlesofchaos.org/"">Principles of Chaos Engineering</a></br>
<i>Chaos Engineering is the discipline of experimenting on a distributed system
in order to build confidence in the system’s capability
to withstand turbulent conditions in production.</i>
</br></br>
Our microservices architecture is inevitable a distributed system and controlled failure injection is a way that leads to building more resilient services. "
Resilience patterns,trial,techniques,FALSE,"We are building a distributed system, that introduces new failure modes. We need to adopt <a href=""https://www.slideshare.net/ufried/resilience-reloaded-more-resilience-patterns"">Resilience patterns</a> to enable highly availability by reducing MTTR (mean time to recovery). "
Multi-tenancy,trial,techniques,FALSE,"When testing in production, production data needs to be segregated from test data. This includes data generated by the tests. Also the data lake and tools like Google Analytics should not be affected. One option is, that all services follow the concept of a data sandbox, which is just a form of multi-tenancy. One tenant is production and additional tenants can be created for testing. This would also help with APIs for partners, which typically also require a tenant for testing."
Sidecar pattern,assess,techniques,FALSE,"The <a href=""https://medium.com/netflix-techblog/prana-a-sidecar-for-your-netflix-paas-based-applications-and-services-258a5790a015"">sidecar pattern</a> was introduced by Netflix to push platform capabilities from shared libraries back into the infrastructure.
We are for example trying the DataDog agent as sidecar in Fargate."
Reactive programming/ ReactiveX,assess,techniques,FALSE,"<a href=""https://en.wikipedia.org/wiki/Reactive_programming"">Reactive programming</a> and more specifically <a href=""http://reactivex.io/"">ReactiveX</a> is a programming paradigm and powerful abstraction for many problems. It is declarative and available for all major languages."
Consumer-driven contract testing,assess,techniques,FALSE,"<a href=""https://www.thoughtworks.com/de/radar/techniques/consumer-driven-contract-testing"">Consumer-driven contract testing</a> is technique, that has proven helpful verifying the integration of microservices. Pact is one framework that supports this approach."
GraphQL,assess,techniques,FALSE,"We do not intend to replace REST APIs with GraphQL, but it might be an option for aggregating existing APIs. For example as backend for frontends (BFF)."
Event Sourcing,assess,techniques,FALSE,"<a href=""https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing"">Event Sourcing</a> is a pattern that stores a record of events as source of truth. It is a complex pattern, that is helpful in complex domains. At is often used in conjunction with CQRS and matches an event-driven architecture."
CQRS,assess,techniques,FALSE,"<a href=""https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs"">CQRS - Command Query Responsibility Segregation</a> is a pattern that treats updating and reading operations differently. This in contrast to CRUD applications, where all operations are applied to the same entity. CQRS in conjunction with Event Sourcing is a very powerful, but complex pattern."
Security gamification,assess,techniques,TRUE,"Security awereness and skills in autonomous teams are required to drop the security gatekeeper approach. Security gamification is an option to raise this awareness. This could either be via tools like <a href=""https://github.com/otto-de/security-belt"">Security Belt</a> or via security gamedays. Capture the flag and red team vs blue team are popular security games.
<a href=""https://www.mcafee.com/enterprise/en-us/assets/reports/restricted/rp-winning-game.pdf"">Report by McAfee, see page 9</a>"
API Gateway as sidecar,assess,techniques,TRUE,"Deploying an API Gateway as a sidecar give us an enforcement point of 
API governance and relieves the microservices of routine tasks that 
would otherwise have be implemented in each service again and again. An 
API Gateway sidecar can enforce basic security rules, produces audit 
logs,  publish standardized metrics and apply rate limiting. Putting 
these responsibilities in small and simple sidecar avoids a dependency 
on a centrally managed API Gateway and extra network hops. More about 
different <a 
href=""https://medium.com/@lakwarus/micro-api-gateway-58cce43f2d7d"">API
 Gateway deployment patterns</a>."
Feature toggle service,assess,techniques,TRUE,"At some point in the mature of implementing feature toggles a feature toggle service is required. It enable toggles across deployable units and allows for more sophisticated use cases like A/B testing and canary releases. As we are still early in the adoption of feature toggles introducing the added value of a feature toggle service will also help with adoption. There are OSS and managed feature toggle services available. For example:
</br>
<a href=""https://github.com/Unleash/unleash"">Unleash (OSS)</a></br>
<a href=""https://launchdarkly.com/"">Launch Darkly (managed)</a></br>
<a href=""https://rollout.io/"">Rollout (managed)</a>"
Shared libraries,hold,techniques,FALSE,"""Common"", ""General"" or similar sounding libraries should be avoided if they could not be opensourced since upgrading an (internal) common library is poarticularly complex to almost impossible."
Layered architecture,hold,techniques,FALSE,Layered architecture is a good pattern for structuring larger services. We feel that a microservice should be small enough to not require that much internal structure. The friction introduced by internally layering a microservice should be avoided. Hexagonal architecture is a preferred internal architecture for microservices.
Scrum theater,hold,techniques,FALSE,"Scrum alone is not sufficient to become agile. All the ceremony does not help, when for example XP practices are left out. Scrum is deliberatly non descriptive with that regard, but it also should not be forgotten."
CoP theater,hold,techniques,FALSE,"Community of practices, that do not emphasize the community nor the practice part, can degrade into a one-way information sharing by a minority."
Entity service,hold,techniques,FALSE,"Entity services are the attempt of decomposing a system into microservices following the nouns hence entities. At first glance they have all properties of proper microservices, but are completely missing the behavior part. You might end up with a service that supports CRUD via REST and all the behavior is pushed to the clients of the service. Use event storming and reason about event based data flow to define your microservices."
MSRT,hold,techniques,FALSE,"As the runtime is mainly managed by AWS we don't want to have a separate team that acts as a gatekeeper for other teams. (Conflicts with multi-account strategy and ""you build it you run it"""